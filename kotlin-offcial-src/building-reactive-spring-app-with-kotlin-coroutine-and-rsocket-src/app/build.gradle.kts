/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // plugin for spring boot applications, provides features like packaging application as executable Jars or Wars.
    id("org.springframework.boot") version "3.0.3"

    // managing dependencies in spring-based project, it provides a way to handle versioning and resolving transitive dependencies. 
    id("io.spring.dependency-management") version "1.1.0"

    // adds kotlin support for compiling Kotlin code to JVM bytecode. 
	kotlin("jvm") version "1.7.22"

    // add support for kotlin in spring projects allowing integration between kotin and spring-specific functionality like dependency injection.
	kotlin("plugin.spring") version "1.7.22"

    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
	implementation("org.springframework.boot:spring-boot-starter-web")

    // add kotlin reflection support, required for using features like `data` classes and annotations. 
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    // include kotlin standard libaray that is compatible with JDK8. 
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")


    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "dev.real.ChatKotlinApplication"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
